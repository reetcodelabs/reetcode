// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_PRISMA_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum SubscriptionPlan {
    FREE
    MONTHLY
    ANNUALLY
    LIFETIME
}

enum SubscriptionPlanStatus {
    ACTIVE
    CANCELLED
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription?
    Solution      Solution[]
    apiKey        String?       @unique
}

model Subscription {
    id           String                  @id @default(cuid())
    subscribedAt DateTime?
    expiresAt    DateTime?
    plan         SubscriptionPlan?       @default(FREE)
    status       SubscriptionPlanStatus? @default(ACTIVE)

    userId String @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    channel           String?
    authorizationCode String?
    last4             String?
    expMonth          String?
    expYear           String?
    brand             String?
    cardType          String?
    bank              String?
}

model VerificationToken {
    email   String   @unique
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model CareerPath {
    id   String @id @default(cuid())
    name String
    slug String @unique

    Problem Problem[]
}

model ProblemSet {
    id               String  @id @default(cuid())
    name             String
    slug             String  @unique
    icon             String  @db.Text()
    shortDescription String?
    longDescription  String?

    problems Problem[]
}

enum TechStack {
    JAVASCRIPT
    TYPESCRIPT
    ANGULAR
    VUE
    NEXTJS
    NUXTJS
    REACT
    HTML
    CSS
    STYLED_COMPONENTS
    TAILWINDCSS
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

model Problem {
    id                 String      @id @default(cuid())
    name               String
    slug               String      @unique
    description        String?
    brief              String      @db.Text()
    solution           String      @db.Text()
    solutionVideoUrl   String?
    techStack          TechStack[]
    difficulty         Difficulty  @default(MEDIUM)
    completionDuration Int?        @default(0)
    premiumOnly        Boolean?    @default(false)

    careerPathId String?
    careerPath   CareerPath? @relation(fields: [careerPathId], references: [id])

    problemSets ProblemSet[]
    templates   Template[]
    Solution    Solution[]
}

model Template {
    id        String      @id @default(cuid())
    name      String
    default   Boolean?    @default(true)
    techStack TechStack[]

    starterFiles File[] @relation("starterFiles")

    solutionFiles File[] @relation("solutionFiles")

    hiddenFiles String[]

    problem Problem @relation(fields: [problemId], references: [id])

    startCommand String?
    testCommand  String?

    sandpackTemplate String?
    problemId        String
    Solution         Solution[]

    @@unique([problemId, name])
}

model Solution {
    id          String    @id @default(cuid())
    completedAt DateTime?

    problem  Problem  @relation(fields: [problemId], references: [id])
    template Template @relation(fields: [templateId], references: [id])
    user     User     @relation(fields: [userId], references: [id])

    userId     String
    problemId  String
    templateId String

    latestTestResults String? @db.Text()

    files File[]

    @@unique([problemId, userId, templateId])
}

model File {
    id   String  @id @default(cuid())
    path String
    root Boolean @default(true)

    solutionId         String?
    starterTemplateId  String?
    solutionTemplateId String?

    solution Solution? @relation(fields: [solutionId], references: [id])

    starterFileTemplate  Template? @relation(fields: [starterTemplateId], references: [id], name: "starterFiles")
    solutionFileTemplate Template? @relation(fields: [solutionTemplateId], references: [id], name: "solutionFiles")

    content String @db.Text()

    @@unique([starterTemplateId, path])
    @@unique([solutionTemplateId, path])
}
